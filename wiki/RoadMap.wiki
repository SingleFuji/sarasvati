#summary Sarasvati Roadmap
#labels Featured

= Roadmap =

Sarasvati is fairly stable at this point, and we are workings towards a 1.0 release. 

<wiki:toc/>

== 1.0 TODO ==

=== Editor: Completed ===

A graphical editor for process definitions is in progress. It is now usable for process definitions that don't use externals.

 * Undo/Redo framework: Done
 * Load: Done
 * Save: Done
 * Add nodes: Done
 * Delete nodes: Done
 * Add external: Done
 * Delete external: Done
 * Move nodes: Done
 * Connect nodes: Done
 * Change connections: Done
 * Remove connections: Done
 * Edit node properties: Done
 * Edit external properties: Done
 * Edit arc properties: Done
 * Cleanup undo/redo MDI interactions: Done
 * Autolayout: Done
 * Self arcs: Done
 * Arc labels: Done
 * Cleanup move/add/reconnect interactions: Done
 * Check for unsaved: Done
 * Graph validation on save: Done
 * Preferences
   * Node Types
     * Basic node type management: Done
     * Select icon type: Done
     * Select icon color: Done
 * Select
   * Select single for delete: Done
   * Selected multiple for delete: Done
   * Select multipe for move: Done
   * Cut: Done
   * Copy: Done
   * Paste: Done
 * Process Definition Library: Done
 * Autoset file extension: Done
 * Start with new PD on startup. If a file is opened and new PD is untouched, replace it with edit: Done
 * Don't output namespace for `<custom>`: Done
 * Investigate shortestpathrouter weirdness: Done
 * Use right click context menu for nodes/externals for cut/copy/delete/edit properties: Done
 * Add info text for join types: Done
 * Move layout info to `<editor>` section of PD file: Done

=== Token Sets/Template Nodes: Completed ===

See [TokenSetsDesign design]. 

 * Milestone I
   * Basic template based split join working in memory engine
   * Status: Done
 * Milestone II
   * Basic template based split join working in hibernate engine
   * Status: Done
 * Milestone III
   * TokenSet env working in memory engine
   * Status: Done
 * Milestone IV
   * TokenSet env working in hibernate engine
   * Status: Done
 * Milestone V
   * TokenSet integration with backtracking
   * Status: Done
 * Milestone VI
   * Allow specification of a the name of a token set to join on in a TokenSet
   * Status: Done

===Documentation: In Progress===
 # Documentation needs to be updated for changes. 
   * Split out external
   * isJoin => joinType
   * Env refactoring
   * hibernate node type handling
   * Graph validation framework
 # It also need to be shipped with the release, rather than just available on the project WIKI. 
   * Could use a WIKI -> HTML compiler. 
   * Alternately, could switch to alternate documentation format, such as DocBook (probably a better long term solution)

=== Performance Tuning: Completed ===
Analyzed SQL generated from hibernate. Ran explain plan on each statement and made sure that no table scans were being performed. 

=== Broader Database support: In progress ===

  * Investigate if schema can be generate from Hibernate mappings
    * Issue with generating FKs to enum tables
    * Issue text columns on postgesql vs varchars in other dbs
  * Investigate table name mappings, so users can pick their own table names
    * Use hibernate NamingStrategy
    * Make sure we don't hardcode tables/column name, if possible.
  * Need test suite for DB
    * Test against following databases
      * Postgresql
      * Sybase
      * MySQL
      * Oracle
      * DB2
      * Some simple file based engine? BerkleyDB?

==Post 1.0 Release==

=== JDBC Backend: In progress ===

This would be good as a fall back for users who don't use hibernate. Also, it would make sure that the interfaces are sufficiently flexible.

Implementation started.

=== Improve Editor ===
  * Guard Editor
  * More node type icons
  * Allow customization: ie: user defined drop downs for user properties
  * Graph properties
    * Define allowed properties, when used as external
    * Define allowed input/output points, when used as external
    * Define default input/output points, when used as external

=== Other ===
Possibilities:

  * Improve visualizations
  * Additional backends
    * Google AppEngine/Bigtable?
  * Porting to .NET/Python/Ruby?
    * Porting to C# is a priority, based on request.