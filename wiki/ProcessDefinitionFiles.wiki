#summary File format for Process Definitions

= Introduction =
Sarasvati uses an XML file format for process definitions. These files can be loaded into in-memory graph structures and executed, or they can be loaded first into a database, and from there loaded and executed.

= Sarasvati File Format =

===The XML Schema Definition ==
The process definition file format is defined by an XSD, which can [http://code.google.com/p/sarasvati/source/browse/common/ProcessDefinition.xsd available to view in the project SVN].

We'll explore the sarasvati file format, starting with the root element and working from there, with examples interspersed.

===Element `process-definition`===
The root element. It has a required `name` element. Every process definition must have a unique name. It should also indicates the XML namespace, that being `"http://sarasvati.googlecode.com/ProcessDefinition"`.

====Attributes====
|| *Attribute Name* || *Usage* || *Required?* || *Default* ||
|| name || Specifies the unique name for this process definition || Yes || N/A ||

====Nested Elements====
  * *node* - Every `process-definition` must have a least one `node` defined.

===Element `node`===
Every process definition must have at least one `node` element defined. Every node must have a name _unique to that file_. Any node may have the `isStart` attribute set. If not specified it will default to false. 

====Attributes====
|| *Attribute Name* || *Usage* || *Required?* || *Default* ||
|| name || Specifies the name for this node. Name must be unique in this process definition. || Yes || N/A ||
|| type || The node type. Determines the node behavior. || No || `node` ||
|| isStart || Specifies whether a node will be presented with a token when the process is started. || No || false ||
|| isJoin || If true, the node will wait for arc tokens on all arcs with a given name before executing. If false, the node will fire whenever any single arc token arrives. || No || false ||

====Built in Node Types====
    * `node` - Nodes of this type will complete out on the default arc when they are executed. The node type can be useful if a synchronization point is needed. It can also be used as a choice, with a guard which skips to selected arcs.
    * `wait` - Nodes if this type will enter a wait state when executed. They will continue when completed by external logic. This can be useful when you need to wait on an external event, and no other logic is required.
    * `script` - Requires a `script` element which will contain a script to execute when the node is executed.

====Nested Elements====
  * *guard* - Nodes may optionally have a guard element.
  * *arc*   - Nodes may have zero to many arcs, pointing to other nodes in the same process definition file.
  * *externalArc* - Nodes may have zero to many external arcs, pointing to or from nodes in other process definitions.

===Element `guard`===
A node may contain a GuardLang statement, which will be executed as the node's guard.

====Attributes====
The `guard` element has no attributes

====Nested Elements====
The `guard` element may not contain any nested elements. 

===One Node Example===
With just `process-definition` and `node` a simple process definition can be built.

The simplest process definition would be a single node. Graphically, it would look like:

[http://sarasvati.googlecode.com/svn/wiki/images/pdfiles/example1.jpg]

The corresponding XML process definition would look like:

{{{
<?xml version="1.0"?>

<process-definition name="simplest" xmlns="http://sarasvati.googlecode.com/ProcessDefinition">

  <node name="node-one" isStart="true"/>

</process-definition>
}}}

While there can be many nodes declared in a process definition, we have as yet, not defined a way of linking them together.

===Element `arc`===
An `arc` element declares an arc from the enclosing node to the node with the name specified in the `to` attribute.

====Attributes====
|| *Attribute Name* || *Usage* || *Required?* || *Default* ||
|| to || Specifies the name of the node this arc goes to || Yes || N/A ||
|| name || Specifies the arc name. This name need not be unique. || No || null ||

====Nested elements===
An arc may not contain any nested elements.

===Arc Example One===

The following example contains three nodes.

[http://sarasvati.googlecode.com/svn/wiki/images/pdfiles/example2.jpg]

{{{
<?xml version="1.0"?>

<process-definition name="example2" xmlns="http://sarasvati.googlecode.com/ProcessDefinition">

  <node name="node-one" isStart="true">
    <arc to="node-two"/>
    <arc to="node-three"/>
  </node>

  <node name="node-two"/>
  <node name="node-three"/>

</process-definition>
}}}

To indicate an arc, an `arc` element is added to the start node. The `to` attribute indicates the name of the target node. The node with the name must exist in the same process definition file.


=== Arc Example Two ===

Here is an example with two start nodes. They both have arcs to `node-three`, which is a join node. It will only execute once both `node-one` and `node-two` have completed.

[http://sarasvati.googlecode.com/svn/wiki/images/pdfiles/example3.jpg]

{{{
<?xml version="1.0"?>

<process-definition name="example3" xmlns="http://sarasvati.googlecode.com/ProcessDefinition">

  <node name="node-one" isStart="true">
    <arc to="node-three"/>
  </node>

  <node name="node-two" isStart="true">
    <arc to="node-three"/>
  </node>

  <node name="node-three" isJoin="true"/>

</process-definition>
}}}

Now that we've seen how to create links between nodes in the same process definition, let us examine how to create links to nodes in external process definitions.

===Element `externalArc`===
An `externaArc` element declares an arc from the enclosing node to the external node with the name specified in the `nodeName` attribute

====Attributes====
|| *Attribute Name* || *Usage* || *Required?* || *Default* ||
|| external || Specifies the name of the external process definition this arc goes to || Yes || N/A ||
|| instance || Specifies the specific instance of the external process definition this arc goes to. All external arcs with the same values `external` and `instance` will go to the same set of nodes. || Yes || N/A ||
|| nodeName || Specifies the name of the node this arc goes to || Yes || N/A ||
|| name || Specifies the external arc name. This name need not be unique. || No || null ||
|| type || Indicates if the containing node is at the beginning or end of the arc. Valid values are `out` and `in`. If `out` is specified, the containing node is the start node of the arc, otherwise it is the end. || Yes || N/A ||

====Nested elements===
An external arc may not contain any nested elements.

=== External Arc Example One ===
To examine external arcs, we'll need at least two process definitions.

This example is from the EngineConcepts section.

{{{
<?xml version="1.0"?>

<process-definition name="ext" xmlns="http://sarasvati.googlecode.com/ProcessDefinition">

  <node name="A" isJoin="true">
    <arc to="B"/>
  </node>

  <node name="B" isJoin="true"/>

</process-definition>
}}}

It looks like:

[http://sarasvati.googlecode.com/svn/wiki/images/concepts-externals1.jpg]

The graph which contains external arcs going to 'ext', is below.

{{{
<?xml version="1.0"?>

<process-definition name="example4" xmlns="http://sarasvati.googlecode.com/ProcessDefinition">

  <node name="P" isStart="true">
    <externalArc external="ext" instance="1" nodeName="A" type="out"/>
  </node>

  <node name="Q" isStart="true">
    <externalArc external="ext" instance="2" nodeName="A" type="out"/>
  </node>

  <node name="R" isStart="true">
    <externalArc external="ext" instance="2" nodeName="B" type="out"/>
  </node>

  <node name="X">
    <arc to="Z"/>
    <externalArc external="ext" instance="1" nodeName="A" type="in"/>
  </node>

  <node name="Y">
    <arc to="Z"/>
    <externalArc external="ext" instance="2" nodeName="B" type="in"/>
  </node>

  <node name="Z" isJoin="true"/>

</process-definition>
}}}

It looks like:

[http://sarasvati.googlecode.com/svn/wiki/images/concepts-externals4.jpg]

When the process definition is loaded into memory, it will look like:

[http://sarasvati.googlecode.com/svn/wiki/images/concepts-externals5.jpg]

==Java API===
The process definition file format also supports custom elements and attributes, but before we discuss that, the API needs to be introduced.

At the top is the `Graph` interface.

{{{
package com.googlecode.sarasvati;

public interface Graph
{
  String getName ();
  int getVersion ();
  List<? extends Arc> getArcs ();
  List<? extends Arc> getInputArcs (Node node);
  List<? extends Arc> getInputArcs (Node node, String arcName);
  List<? extends Arc> getOutputArcs (Node node);
  List<? extends Arc> getOutputArcs (Node node, String arcName);
  List<? extends Node> getStartNodes ();
  List<? extends Node> getNodes ();
}
}}}

A `Graph` contains instances of `Node` and `Arc`.

`Node` has the following API:

{{{
package com.googlecode.sarasvati;
public interface Node extends Adaptable
{
  String getName ();
  String getType ();
  boolean isJoin ();
  boolean isStart ();
  String getGuard ();
  Graph getGraph ();
  boolean isExternal ();
  GuardResponse guard (Engine engine, NodeToken token);
  void execute (Engine engine, NodeToken token);
}
}}}

To provide custom behavior to your nodes, you will override the `execute` method.