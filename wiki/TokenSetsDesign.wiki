#summary Design document for token sets.

= Introduction =

The end goal is to allow template nodes. Template nodes are nodes that that may be allowed to execute many times in parallel. Another node will then collect all the executions.

An example usage would be as part of an approvals process. The process might contain a section which looks like

(Determine approvals need) -> (Approval) -> (Check Results)

The first step would figure out how many approvals are needed. Then the *Approval* node would be executed once for each approval needed. The *Check Results* node would not execute until all the approvals had been completed. So if there were two approvals required, the execution would look something like

(Determine approvals need) ---> (Approval) ----> (Check Results)
                           \                 /
                            \-> (Approval) -/

=Token Sets=
Templates will be implemented using token sets. When completing a node execution, the user be able specify that the completion should generate a token set as well as how many arc tokens should be generated. A new type of join will be added, tokenSetAnd, which will wait for all members of the given token set to either be completed or be waiting on incoming arcs of the node.

Create API for TokenSet

TokenSet
  * Long id
  * String name
  * Env env

TokenSetMember
  * Long id
  * TokenSet set
  * int memberIndex

add method to Engine
  completeExecutionWithToken( NodeToken token, 
                              String arcname, 
                              String tokenSetName,
                              int numberOfTokens, 
                              Env initialEnv )

This will create numberOfTokens tokens on the given arc name, tied to a new token set with the given name and which has the given initial Env.

Add new join type: token set join.

Move from isJoin attribute to joinType

{{{
<node joinType="none|label|tokenset" tokenJoinName="...">
}}}